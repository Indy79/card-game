{"version":3,"sources":["../../src/server/index.js"],"names":["http","SocketIO","express","bodyParser","compression","APP_ROOT","pkg","handleCard","draw","initDeck","__DEV__","app","use","json","urlencoded","extended","static","server","Server","io","port","process","env","PORT","get","req","res","version","_","response","sendFile","usersConnected","isGameOn","on","socket","nick","handshake","query","currentUser","id","cards","console","log","to","emit","broadcast","setTimeout","startGame","map","user","Object","assign","fn","find","push","filter","listen"],"mappings":"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","file":"index.js","sourcesContent":["import http from 'http'\r\nimport SocketIO from 'socket.io'\r\nimport express from 'express'\r\nimport bodyParser from 'body-parser'\r\nimport compression from 'compression'\r\nimport APP_ROOT from 'app-root-path'\r\nimport pkg from '../../package.json'\r\nimport { handleCard, draw, initDeck } from './cards/index.js'\r\nimport { __DEV__ } from './utils.js'\r\n\r\nconst app = express()\r\n\r\napp.use(bodyParser.json())\r\napp.use(bodyParser.urlencoded({ extended: false }))\r\napp.use(compression())\r\n\r\napp.use(express.static(APP_ROOT + '/dist/client'))\r\n\r\nconst server = http.Server(app)\r\nconst io = new SocketIO(server)\r\nconst port = process.env.PORT || 3000\r\n\r\napp.get('/version', function (req, res) {\r\n  res.json({\r\n    version: pkg.version,\r\n  })\r\n})\r\n\r\napp.get('*', function (_, response) {\r\n  response.sendFile(APP_ROOT + '/dist/client/index.html')\r\n})\r\n\r\nlet usersConnected = []\r\nlet isGameOn = false\r\n\r\nio.on('connection', socket => {\r\n  const nick = socket.handshake.query.nick\r\n  const currentUser = {\r\n    id: socket.id,\r\n    nick: nick,\r\n    cards: [],\r\n  }\r\n  usersConnected = [...usersConnected, currentUser]\r\n  if (__DEV__) console.log('Logged with :', currentUser)\r\n  if (__DEV__) console.log('Currently logged :', usersConnected)\r\n\r\n  io.to(socket.id).emit('UPDATE_SELF', currentUser)\r\n\r\n  socket.broadcast.emit('USER_JOINED', currentUser)\r\n\r\n  setTimeout(() => {\r\n    if (__DEV__) console.log('Broadcasting users list')\r\n    io.emit('REFRESH_USER', usersConnected)\r\n  }, 500)\r\n\r\n  const startGame = () => {\r\n    isGameOn = true\r\n    initDeck()\r\n    usersConnected = usersConnected.map(user =>\r\n      Object.assign({}, user, { cards: [] })\r\n    )\r\n    io.emit('REFRESH_USER', usersConnected)\r\n    io.emit('GAME_STARTED')\r\n  }\r\n\r\n  socket.on('GAME_ON', _ => {\r\n    startGame()\r\n  })\r\n\r\n  socket.on('REFRESH_GAME', _ => {\r\n    if (isGameOn) io.emit('GAME_STARTED')\r\n    startGame()\r\n  })\r\n\r\n  socket.on('USER_DRAW_CARD', (id, fn) => {\r\n    if (__DEV__) console.log(`User ${id} draw a card`)\r\n    if (!isGameOn) startGame()\r\n    usersConnected.find(user => user.id === id).cards.push(draw())\r\n    io.emit('REFRESH_USER', usersConnected)\r\n    fn('OK')\r\n  })\r\n\r\n  socket.on('disconnect', _ => {\r\n    if (__DEV__)\r\n      console.log(\r\n        'Unlogged with :',\r\n        usersConnected.find(user => user.id === currentUser.id)\r\n      )\r\n    usersConnected = usersConnected.filter(user => user.id !== currentUser.id)\r\n    if (__DEV__) console.log('Currently logged :', usersConnected)\r\n    socket.broadcast.emit('USER_DISCONNECT', currentUser)\r\n    socket.broadcast.emit('REFRESH_USER', usersConnected)\r\n  })\r\n})\r\n\r\nserver.listen(port, () => {\r\n  console.log('[INFO] Listening on *:' + port)\r\n})\r\n"]}